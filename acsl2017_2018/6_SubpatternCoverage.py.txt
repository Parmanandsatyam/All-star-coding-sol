f=open('as6-test.txt').readlines()
g=[i.replace('\n','').split(' ') for i in f]

#start solving each case
for i in g:
  try: #half-indent shh
    r,c = int(i[0]), int(i[1])
    grid = [[0]*c for j in range(r)]
    for j in range(r): #fill in grid
        s = i[j+2]
        s = s.replace('0','0000')\
             .replace('1','0001')\
             .replace('2','0010')\
             .replace('3','0011')\
             .replace('4','0100')\
             .replace('5','0101')\
             .replace('6','0110')\
             .replace('7','0111')\
             .replace('8','1000')\
             .replace('9','1001')\
             .replace('A','1010')\
             .replace('B','1011')\
             .replace('C','1100')\
             .replace('D','1101')\
             .replace('E','1110')\
             .replace('F','1111')
        s = s[:c]
        grid[j] = list(s)
    #grid filled out, now find min rows to tile and min cols to tile
    for j in range(1,r+1):
        if r%j:
            continue #factors of r only
        tiles = r//j
        works = True
        for k in range(tiles):
            if grid[:j] != grid[j*k:j*k+j]:
                works = False
        if works:
            rmin = j
            break
    for j in range(1,c+1):
        if c%j:
            continue #factors of c only
        tiles = c//j
        works = True
        for k in range(tiles):
            for l in grid:
                if l[:j] != l[j*k:j*k+j]:
                    works = False
        if works:
            cmin = j
            break
    print(rmin, cmin)
  except:
    print('error')
