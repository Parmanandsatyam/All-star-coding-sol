import java.util.*;

public class gofish {
    public static int count(ArrayList<Integer> n, int s){
        int count = 0;
        for(int i = 0; i < n.size(); i++){
        	if(n.get(i) == s){
        		count++;
        	}
        }
        return count;
    }
    public static int overcount(ArrayList<Integer> n, int s){
    	int d = count(n,s);
        if(d >= 4){
            for(int j = 0; j < 4; j++){
                n.remove(new Integer(s));
            }
        }
        return d;
    }
    public static ArrayList<Integer> aExchange(ArrayList<Integer> n, ArrayList<Integer> m, int s){
        while(m.contains(new Integer(s))){
            m.remove(new Integer(s));
            n.add(new Integer(s));
        }
        
        overcount(n, s);
        return n;
    }

    public static ArrayList<Integer> bExchange(ArrayList<Integer> n, ArrayList<Integer> m, int s){
        while(m.contains(s)){
            m.remove(new Integer(s));
            n.add(new Integer(s));
        }
        
        overcount(n, s);
        return m;
    }
    public static void main(String[] args) {
        Scanner reader = new Scanner(System.in);
        ArrayList<Integer> p1 = new ArrayList();
        ArrayList<Integer> p2 = new ArrayList();
        ArrayList<Integer> deck = new ArrayList();
        int[] exchange = new int[10];

        for(int i = 0; i < 7; i++){
            p1.add(reader.nextInt());
        }

        for(int i = 0; i < 7; i++){
            p2.add(reader.nextInt());
        }

        for(int i = 0; i < 10; i++){
            deck.add(reader.nextInt());
        }

        for(int i = 0; i < 10; i++){
            exchange[i] = reader.nextInt();
        }

        if(!p2.contains(exchange[0])){
            p1.add(deck.get(0));
            deck.remove(new Integer(0));
            overcount(p1, exchange[0]);
            System.out.println(count(p1, exchange[0]));
        } else{
            p1 = aExchange(p1, p2, exchange[0]);
            p2 = bExchange(p1, p2, exchange[0]);
            System.out.println(count(p1, exchange[0]));
        }

        if(!p1.contains(exchange[1])){
            p2.add(deck.get(0));
            deck.remove(0);
            overcount(p2, exchange[1]);
            System.out.println(count(p2, exchange[1]));
        } else{
            p2 = aExchange(p2, p1, exchange[1]);
            p1 = bExchange(p2, p1, exchange[1]);
            System.out.println(count(p2, exchange[1]));
        }

         if(!p2.contains(exchange[2])){
            p1.add(deck.get(0));
            deck.remove(0);
            overcount(p1, exchange[2]);
            System.out.println(count(p1, exchange[2]));
        } else{
            p1 = aExchange(p1, p2, exchange[2]);
            p2 = bExchange(p1, p2, exchange[2]);
            System.out.println(count(p1, exchange[2]));
        }

        if(!p1.contains(exchange[3])){
            p2.add(deck.get(0));
            deck.remove(0);
            overcount(p2, exchange[3]);
            System.out.println(count(p2, exchange[3]));
        } else{
            p2 = aExchange(p2, p1, exchange[3]);
            p1 = bExchange(p2, p1, exchange[3]);
            System.out.println(count(p2, exchange[3]));
        }

        if(!p2.contains(exchange[4])){
            p1.add(deck.get(0));
            deck.remove(0);
            overcount(p1, exchange[4]);
            System.out.println(count(p1, exchange[4]));
        } else{
            p1 = aExchange(p1, p2, exchange[4]);
            p2 = bExchange(p1, p2, exchange[4]);
            System.out.println(count(p1, exchange[4]));
        }

        if(!p1.contains(exchange[5])){
            p2.add(deck.get(0));
            deck.remove(0);
            overcount(p2, exchange[5]);
            System.out.println(count(p2, exchange[5]));
        } else{
            p2 = aExchange(p2, p1, exchange[5]);
            p1 = bExchange(p2, p1, exchange[5]);
            System.out.println(count(p2, exchange[5]));
        }

        if(!p2.contains(exchange[6])){
            p1.add(deck.get(0));
            deck.remove(0);
            overcount(p1, exchange[6]);
            System.out.println(count(p1, exchange[6]));
        } else{
            p1 = aExchange(p1, p2, exchange[6]);
            p2 = bExchange(p1, p2, exchange[6]);
            System.out.println(count(p1, exchange[6]));
        }

        if(!p1.contains(exchange[7])){
            p2.add(deck.get(0));
            deck.remove(0);
            overcount(p2, exchange[7]);
            System.out.println(count(p2, exchange[7]));
        } else{
            p2 = aExchange(p2, p1, exchange[7]);
            p1 = bExchange(p2, p1, exchange[7]);
            System.out.println(count(p2, exchange[7]));
        }

        if(!p2.contains(exchange[8])){
            p1.add(deck.get(0));
            deck.remove(0);
            overcount(p1, exchange[8]);
            System.out.println(count(p1, exchange[8]));
        } else{
            p1 = aExchange(p1, p2, exchange[8]);
            p2 = bExchange(p1, p2, exchange[8]);
            System.out.println(count(p1, exchange[8]));
        }

        if(!p1.contains(exchange[9])){
            p2.add(deck.get(0));
            deck.remove(0);
            overcount(p2, exchange[9]);
            System.out.println(count(p2, exchange[9]));
        } else{
            p2 = aExchange(p2, p1, exchange[9]);
            p1 = bExchange(p2, p1, exchange[9]);
            System.out.println(count(p2, exchange[9]));
        }

    }

}
